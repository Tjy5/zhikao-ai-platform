#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
简化版的prompt服务 - 修复f-string问题
支持不同题型的评分维度
"""

def get_question_type_dimensions(question_type: str) -> dict:
    """根据题型返回对应的评分维度和满分 - 基于申论四大题型核心秘籍"""
    
    dimensions_mapping = {
        "概括题": {
            "审题定标": 25,      # 第一步：审题定标——明确"概括谁"、"在哪找"、"怎么答"
            "精准找点": 30,      # 第二步：精准找点——遵循材料，地毯式搜寻关键信息
            "逻辑归并": 25,      # 第三步：逻辑归并——分类合并，提炼升华核心要点  
            "规范成文": 20       # 第四步：规范成文——总分有序，清晰呈现
        },
        "综合分析题": {
            "审题拆解": 25,      # 第一步：审题拆解——识别分析类型，锁定核心对象
            "搜寻组件": 25,      # 第二步：搜寻组件——带着问题阅读，寻找逻辑关系
            "逻辑重构": 30,      # 第三步：逻辑重构——搭建分析框架，串联论证链条
            "规范作答": 20       # 第四步：规范作答——观点前置，论述清晰
        },
        "对策题": {
            "问题诊断": 25,      # 第一步：精准问题诊断——找到"病根"，才能开"药方"
            "角色定位": 20,      # 第二步：角色定位与视角锁定——"谁来解决"，决定"能怎么解决"
            "寻找对策": 30,      # 第三步：从材料中寻找对策来源——对策是"找"与"创"的结合
            "结构呈现": 25       # 第四步：结构化与"动词化"呈现——让对策清晰有力，具备可操作性
        },
        "应用文写作题": {
            "情境解构": 25,      # 第一步：情境解构（黄金三问）——我是谁？写给谁？为什么写？
            "格式遵从": 20,      # 第二步：格式遵从——"穿对衣服"，才能"登对场合"  
            "内容组织": 30,      # 第三步：内容组织与逻辑构建——言之有物，条理清晰
            "语言匹配": 25       # 第四步：语言风格与语气匹配——"说什么话"，要看"对谁说"
        }
    }
    
    # 默认使用概括题的维度
    return dimensions_mapping.get(question_type, dimensions_mapping["概括题"])


def get_methodology_description(question_type: str) -> str:
    """根据题型返回对应的四步法方法论描述"""
    
    methodology_descriptions = {
        "概括题": """
第一步：审题定标——明确"概括谁"、"在哪找"、"怎么答"
第二步：精准找点——遵循材料，地毯式搜寻关键信息
第三步：逻辑归并——分类合并，提炼升华核心要点
第四步：规范成文——总分有序，清晰呈现
        """,
        
        "综合分析题": """
第一步：审题拆解——识别分析类型，锁定核心对象
第二步：搜寻组件——带着问题阅读，寻找逻辑关系
第三步：逻辑重构——搭建分析框架，串联论证链条
第四步：规范作答——观点前置，论述清晰
        """,
        
        "对策题": """
第一步：精准问题诊断——找到"病根"，才能开"药方"
第二步：角色定位与视角锁定——"谁来解决"，决定"能怎么解决"
第三步：从材料中寻找对策来源——对策是"找"与"创"的结合
第四步：结构化与"动词化"呈现——让对策清晰有力，具备可操作性
        """,
        
        "应用文写作题": """
第一步：情境解构（黄金三问）——我是谁？写给谁？为什么写？
第二步：格式遵从——"穿对衣服"，才能"登对场合"
第三步：内容组织与逻辑构建——言之有物，条理清晰
第四步：语言风格与语气匹配——"说什么话"，要看"对谁说"
        """
    }
    
    return methodology_descriptions.get(question_type, methodology_descriptions["概括题"]).strip()


def create_expert_diagnosis_prompt(essay_content: str, question_type: str) -> str:
    """创建专家诊断式批改prompt"""
    
    # 获取该题型对应的评分维度
    dimensions = get_question_type_dimensions(question_type)
    
    # 动态构建JSON模板
    dimensions_json = ""
    for dim_name, max_score in dimensions.items():
        dimensions_json += '''    "{}": {{
      "score": {},
      "feedback": "详细分析该维度的得分失分情况，使用以下格式：【得分点】\\n具体列出该维度做得好的地方和加分因素\\n\\n【扣分点】\\n具体指出失分原因和不足之处\\n\\n【改进方向】\\n简要说明提升建议。要求引用学生原文具体内容进行分析（100-150字）"
    }},
'''.format(dim_name, max_score // 4 * 3)  # 默认给75%的分数作为示例
    
    # 移除最后的逗号
    dimensions_json = dimensions_json.rstrip(',\n')
    
    prompt = """你是一位资深的申论阅卷专家，有20年申论批改经验。现在要对这篇{}进行专业的逐句批改。

请严格按照《申论四大题型核心秘籍》的四步法方法论进行评分。

=== 学生答题内容 ===
{}

=== {}评分标准（基于四大题型核心秘籍） ===
请严格按照以下四步方法论进行评分：
{}

=== 专业批改要求 ===
请以真正的申论阅卷老师身份，基于上述四步法方法论对学生答案进行逐句诊断式批改：

1. **必须引用学生的具体原文**，不能泛泛而谈
2. **每个维度的feedback必须严格使用以下HTML格式，不要使用任何表情符号**：
   - 必须使用：【得分点】
   - 必须使用：【扣分点】
   - 必须使用：【改进方向】
   - 禁止使用：✅、❌、💡等任何表情符号
   - 每个标题后必须换行，各部分用\\n\\n双换行分隔
3. **逐个维度分析加分扣分**，说明具体理由，并结合四步法方法论要求  
4. **用专业阅卷老师的语气**，既严谨又有温度

=== 输出要求 ===
请严格按照以下JSON格式返回批改结果：

{{
  "dimensions": {{
{}
  }},
  "summary": "作为专业阅卷老师，基于四步法方法论对这篇答案的整体印象和核心问题",
  "teacher_comments": "作为资深申论阅卷专家的详细分析：结合《申论四大题型核心秘籍》的方法论，深入分析这篇答案的突出亮点、主要问题的根本原因、针对性改进方法，以及与标准四步法的差距。请提供200字以上的详细专业诊断，重点是指导如何按方法论提升。"
}}

🚨 **重要**：
- 只返回JSON数据，不要任何前缀或后缀文字
- 确保JSON语法完全正确
- 所有中文字符串用双引号包围
- teacher_comments必须基于四步法方法论进行专业分析

请开始专业批改，直接返回JSON数据：""".format(
        question_type, 
        essay_content, 
        question_type,
        get_methodology_description(question_type),
        dimensions_json
    )

    return prompt


def create_overall_evaluation_prompt(diagnosis_result: dict, essay_content: str, question_type: str) -> str:
    """创建整体评价prompt"""
    
    prompt = """基于专业诊断结果，请对这篇{}进行最终评价。

=== 诊断结果 ===
{}

=== 学生答案 ===
{}

=== 评价要求 ===
作为资深申论阅卷专家，请给出最终评价：

{{
  "total_score": [总分数值],
  "overall_evaluation": "简洁的整体评价，总结答案的核心优缺点（100字以内）",
  "priority_suggestions": [
    "最重要的改进建议1（具体操作层面）",
    "最重要的改进建议2（具体操作层面）"
  ],
  "strengths_to_maintain": [
    "需要保持的优点1（具体举例）",
    "需要保持的优点2（具体举例）"
  ],
  "final_comments": "作为专业阅卷老师的详细最终点评：深度分析这篇答案在申论评分标准下的表现，包括具体的得分失分原因、与优秀答案的差距、以及系统性的提升路径。请提供250字以上的专业深度分析，重点是提供提升指导。"
}}

🚨 **重要要求**：
- overall_evaluation和final_comments必须详细具体，不能流于表面
- 必须结合学生的具体原文进行分析
- 给出可操作的改进建议，不能只是泛泛而谈
- 只返回JSON数据

请开始评价：""".format(question_type, str(diagnosis_result), essay_content)

    return prompt