"use client";

import { useEffect, useState } from "react";
import { API_BASE_URL } from "../../config/api";

type HistoryItem = {
  id: string;
  timestamp?: string;
  type?: string;
  questionType?: string;
  score?: number;
};

type HistoryDetail = {
  id: string;
  timestamp?: string;
  type?: string;
  request: any;
  response: any;
  extra?: any;
};

const api = () => API_BASE_URL;

export default function HistoryPage() {
  const [items, setItems] = useState<HistoryItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selected, setSelected] = useState<HistoryDetail | null>(null);
  const [deleting, setDeleting] = useState(false);

  // Sanitize AI outputs to hide internal prompt phrases from users
  const sanitizeText = (text: string) => {
    if (!text) return text;
    try {
      let t = text;
      const patterns: RegExp[] = [
        /作为资深申论阅卷专家["'“”]?悟道["'“”]?的.*?[：:]\s*/g,
        /作为.*?阅卷专家.*?的.*?[：:]\s*/g,
        /悟道.*?专业.*?[：:]\s*/g,
        /深度专业诊断[：:]\s*/g,
      ];
      for (const p of patterns) t = t.replace(p, "");
      return t.trimStart();
    } catch {
      return text;
    }
  };

  // Replacer for JSON.stringify to sanitize all string fields
  const jsonSanitizer = (_key: string, value: any) =>
    typeof value === "string" ? sanitizeText(value) : value;

  const loadList = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetch(`${api()}/api/v1/essays/history?limit=50`);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();
      setItems(data.items || []);
    } catch (e: any) {
      setError(e?.message || "加载失败");
    } finally {
      setLoading(false);
    }
  };

  const loadDetail = async (id: string) => {
    setError(null);
    setSelected(null);
    try {
      const res = await fetch(`${api()}/api/v1/essays/history/${id}`);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();
      setSelected(data as HistoryDetail);
    } catch (e: any) {
      setError(e?.message || "读取详情失败");
    }
  };

  const clearAll = async () => {
    if (!confirm("确定清空所有历史记录？该操作不可撤销")) return;
    setDeleting(true);
    setError(null);
    try {
      const res = await fetch(`${api()}/api/v1/essays/history`, { method: "DELETE" });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      setSelected(null);
      await loadList();
    } catch (e: any) {
      setError(e?.message || "清空失败");
    } finally {
      setDeleting(false);
    }
  };

  useEffect(() => {
    loadList();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto p-6">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-bold text-gray-800">历史记录</h1>
          <div className="space-x-3">
            <button
              onClick={loadList}
              className="px-4 py-2 rounded-md bg-white border border-gray-300 text-gray-700 hover:bg-gray-100"
              disabled={loading}
            >
              刷新
            </button>
            <button
              onClick={clearAll}
              className="px-4 py-2 rounded-md bg-red-600 text-white hover:bg-red-700 disabled:opacity-50"
              disabled={deleting}
            >
              清空
            </button>
          </div>
        </div>

        {error && (
          <div className="mb-4 p-3 rounded-md bg-red-50 text-red-700 border border-red-200">{error}</div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white rounded-xl shadow border border-gray-200">
            <div className="px-4 py-3 border-b border-gray-200 flex items-center justify-between">
              <h2 className="font-semibold text-gray-800">最近 50 条</h2>
              {loading && <span className="text-sm text-gray-500">加载中...</span>}
            </div>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">时间</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">类型</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">题型</th>
                    <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">分数</th>
                    <th className="px-4 py-2"></th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {items.map((it) => {
                    const ts = it.timestamp ? new Date(it.timestamp) : null;
                    const tsStr = ts ? ts.toLocaleString() : "";
                    return (
                      <tr key={it.id}>
                        <td className="px-4 py-2 text-sm text-gray-700 whitespace-nowrap">{tsStr}</td>
                        <td className="px-4 py-2 text-sm text-gray-700 whitespace-nowrap">{it.type}</td>
                        <td className="px-4 py-2 text-sm text-gray-700 whitespace-nowrap">{it.questionType}</td>
                        <td className="px-4 py-2 text-sm text-gray-700 whitespace-nowrap">{typeof it.score === 'number' ? it.score.toFixed(1) : '-'}</td>
                        <td className="px-4 py-2 text-right">
                          <button
                            onClick={() => loadDetail(it.id)}
                            className="px-3 py-1.5 text-sm rounded-md bg-blue-600 text-white hover:bg-blue-700"
                          >详情</button>
                        </td>
                      </tr>
                    );
                  })}
                  {items.length === 0 && !loading && (
                    <tr>
                      <td colSpan={5} className="px-4 py-6 text-center text-gray-500">暂无历史记录</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow border border-gray-200">
            <div className="px-4 py-3 border-b border-gray-200 flex items-center justify-between">
              <h2 className="font-semibold text-gray-800">详情</h2>
              {selected && (
                <span className="text-xs text-gray-500">ID: {selected.id}</span>
              )}
            </div>
            <div className="p-4">
              {!selected && (
                <div className="text-gray-500">选择左侧一条记录查看详情</div>
              )}
              {selected && (
                <div className="space-y-4">
                  <div>
                    <div className="text-sm text-gray-500 mb-1">请求</div>
                    <pre className="text-xs bg-gray-50 p-3 rounded-md overflow-auto border border-gray-200">
                      {JSON.stringify(selected.request, jsonSanitizer, 2)}
                    </pre>
                  </div>
                  <div>
                    <div className="text-sm text-gray-500 mb-1">响应</div>
                    <pre className="text-xs bg-gray-50 p-3 rounded-md overflow-auto border border-gray-200">
                      {JSON.stringify(selected.response, jsonSanitizer, 2)}
                    </pre>
                  </div>
                  {selected.extra && (
                    <div>
                      <div className="text-sm text-gray-500 mb-1">附加</div>
                      <pre className="text-xs bg-gray-50 p-3 rounded-md overflow-auto border border-gray-200">
                        {JSON.stringify(selected.extra, jsonSanitizer, 2)}
                      </pre>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
